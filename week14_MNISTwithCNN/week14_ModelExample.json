{"paragraphs":[{"text":"%spark\n\nimport org.apache.spark.SparkContext\nimport org.apache.spark.ml.classification.{RandomForestClassificationModel, RandomForestClassifier}\nimport org.apache.spark.ml.classification.LogisticRegression\nimport org.apache.spark.ml.feature.VectorAssembler\nimport org.apache.spark.ml.linalg.Vectors\nimport org.apache.spark.ml.linalg.DenseVector\nimport org.apache.spark.sql.functions.udf\nimport org.apache.spark.sql.DataFrame\nimport org.apache.spark.ml.classification.MultilayerPerceptronClassifier\nimport scala.collection.JavaConversions._\nimport org.apache.spark.storage.StorageLevel\n\n\nprintln(\"Scala version: \" + util.Properties.versionString);\nprintln(\"Spark version: \" + sc.version);\nprintln(\"Java version: \" + System.getProperty(\"java.version\"))\n\nvar safe_mode : Boolean = false;","user":"anonymous","dateUpdated":"2019-05-01T03:45:59+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.SparkContext\nimport org.apache.spark.ml.classification.{RandomForestClassificationModel, RandomForestClassifier}\nimport org.apache.spark.ml.classification.LogisticRegression\nimport org.apache.spark.ml.feature.VectorAssembler\nimport org.apache.spark.ml.linalg.Vectors\nimport org.apache.spark.ml.linalg.DenseVector\nimport org.apache.spark.sql.functions.udf\nimport org.apache.spark.sql.DataFrame\nimport org.apache.spark.ml.classification.MultilayerPerceptronClassifier\nimport scala.collection.JavaConversions._\nimport org.apache.spark.storage.StorageLevel\nScala version: version 2.11.12\nSpark version: 2.4.1\nJava version: 1.8.0_212\nsafe_mode: Boolean = false\n"}]},"apps":[],"jobName":"paragraph_1556682025117_-1741001168","id":"20181126-193953_1359598422","dateCreated":"2019-05-01T03:40:25+0000","dateStarted":"2019-05-01T03:45:59+0000","dateFinished":"2019-05-01T03:46:04+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:18842"},{"text":"%sparkdl.dep\n\n// Load in a bunch of useful dependencies. \n// This will let us use deeplearning4j directly from spark. \n\n// N.B: Only needs to be done once, don't comment in and run this unless you get ClassNotFound in the next tile. \n\n\n// z.load(\"org.nd4j:nd4j-native-platform:1.0.0-beta3\").exclude(\"org.scala-lang:scala-compiler, org.apache.spark:*, io.netty:*, org.apache.hadoop:*, org.codehaus.jackson:*, com.fasterxml.jackson.core:*, org.antlr:*, com.fasterxml.jackson.dataformat:*, com.fasterxml.jackson.datatype:*, com.fasterxml.jackson.module:*\");\n\n// z.load(\"org.deeplearning4j:deeplearning4j-core:1.0.0-beta3\").exclude(\"org.scala-lang:scala-compiler, org.apache.spark:*, io.netty:*, org.apache.hadoop:*, org.codehaus.jackson:*, com.fasterxml.jackson.core:*, org.antlr:*, com.fasterxml.jackson.dataformat:*, com.fasterxml.jackson.datatype:*, com.fasterxml.jackson.module:*\");\n\n// z.load(\"org.deeplearning4j:deeplearning4j-datasets:1.0.0-beta3\").exclude(\"org.scala-lang:scala-compiler, org.apache.spark:*, io.netty:*, org.apache.hadoop:*, org.codehaus.jackson:*, com.fasterxml.jackson.core:*, org.antlr:*, com.fasterxml.jackson.dataformat:*, com.fasterxml.jackson.datatype:*, com.fasterxml.jackson.module:*\");\n\n// z.load(\"org.datavec:datavec-spark_2.11:1.0.0-beta3_spark_2\").exclude(\"org.scala-lang:scala-compiler, org.apache.spark:*, io.netty:*, org.apache.hadoop:*, org.codehaus.jackson:*, com.fasterxml.jackson.core:*, org.antlr:*, com.fasterxml.jackson.dataformat:*, com.fasterxml.jackson.datatype:*, com.fasterxml.jackson.module:*\");\n\n// z.load(\"org.deeplearning4j:dl4j-spark_2.11:1.0.0-beta3_spark_2\").exclude(\"org.scala-lang:scala-compiler, org.apache.spark:*, io.netty:*, org.apache.hadoop:*, org.codehaus.jackson:*, com.fasterxml.jackson.core:*, org.antlr:*, com.fasterxml.jackson.dataformat:*, com.fasterxml.jackson.datatype:*, com.fasterxml.jackson.module:*\");\n","user":"anonymous","dateUpdated":"2019-05-01T03:47:47+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556682226381_-840580438","id":"20190501-034346_1833567292","dateCreated":"2019-05-01T03:43:46+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:19645","dateFinished":"2019-05-01T03:47:09+0000","dateStarted":"2019-05-01T03:46:34+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res0: org.apache.zeppelin.dep.Dependency = org.apache.zeppelin.dep.Dependency@4d72f92d\n"}]}},{"text":"%sparkdl\n\n// Pull in zounds of packages (we don't need all of them, but many of them.)\n\nimport org.deeplearning4j.datasets.iterator.impl.MnistDataSetIterator;\nimport org.deeplearning4j.eval.Evaluation;\nimport org.deeplearning4j.nn.conf.MultiLayerConfiguration;\nimport org.deeplearning4j.nn.conf.NeuralNetConfiguration;\nimport org.deeplearning4j.nn.conf.inputs.InputType;\nimport org.deeplearning4j.nn.conf.layers._; // N.B: .* -> ._\nimport org.deeplearning4j.nn.multilayer.MultiLayerNetwork;\nimport org.deeplearning4j.nn.weights.WeightInit;\nimport org.deeplearning4j.optimize.listeners.ScoreIterationListener;\nimport org.nd4j.linalg.activations.Activation;\nimport org.nd4j.linalg.dataset.api.iterator.DataSetIterator;\nimport org.nd4j.linalg.learning.config.Nesterovs;\nimport org.nd4j.linalg.lossfunctions.LossFunctions;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.deeplearning4j.spark.impl.multilayer._\nimport org.deeplearning4j.spark.impl.paramavg.ParameterAveragingTrainingMaster;\nimport org.deeplearning4j.spark.api.TrainingMaster;\nimport org.nd4j.linalg.dataset.DataSet;\nimport java.util.ArrayList;\nimport org.apache.spark.api.java.JavaRDD;\nimport scala.collection.JavaConversions._\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.deeplearning4j.spark.api.RDDTrainingApproach;\nimport org.apache.spark.rdd.RDD;","user":"anonymous","dateUpdated":"2019-05-01T03:47:47+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.deeplearning4j.datasets.iterator.impl.MnistDataSetIterator\nimport org.deeplearning4j.eval.Evaluation\nimport org.deeplearning4j.nn.conf.MultiLayerConfiguration\nimport org.deeplearning4j.nn.conf.NeuralNetConfiguration\nimport org.deeplearning4j.nn.conf.inputs.InputType\nimport org.deeplearning4j.nn.conf.layers._\nimport org.deeplearning4j.nn.multilayer.MultiLayerNetwork\nimport org.deeplearning4j.nn.weights.WeightInit\nimport org.deeplearning4j.optimize.listeners.ScoreIterationListener\nimport org.nd4j.linalg.activations.Activation\nimport org.nd4j.linalg.dataset.api.iterator.DataSetIterator\nimport org.nd4j.linalg.learning.config.Nesterovs\nimport org.nd4j.linalg.lossfunctions.LossFunctions\nimport org.slf4j.Logger\nimport org.slf4j.LoggerFactory\nimport org.deeplearning4j.spark.impl.multilayer._\nimport org.deeplearning4j.spark.impl.paramavg.ParameterAveragingTrainingMaster\nimport org.deeplearning4j.spark.api.TrainingMaster\nimport org.nd4j.linalg.dataset.DataSet\nimport java.util.ArrayList\nimport org.apache.spark.api.java.JavaRDD\nimport scala.collection.JavaConversions._\nimport java.util.HashMap\nimport java.util.Map\nimport org.deeplearning4j.spark.api.RDDTrainingApproach\nimport org.apache.spark.rdd.RDD\n"}]},"apps":[],"jobName":"paragraph_1556682025121_1260122214","id":"20181126-225653_308008651","dateCreated":"2019-05-01T03:40:25+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:18843","dateFinished":"2019-05-01T03:48:01+0000","dateStarted":"2019-05-01T03:47:47+0000"},{"text":"%sparkdl\nsc.setLogLevel(\"INFO\")\n\n\n// Not needed, also doesn't go onto the REPL, so not useful. \n//val log : Logger = LoggerFactory.getLogger(classOf[MnistDataSetIterator]);\n\nval nChannels = 1; // Number of input channels\nval outputNum = 10; // The number of possible outcomes\nval batchSize = 64; // Test batch size\nval nEpochs = 1; // Number of training epochs\nval seed = 123; //\n\n\nval mnistTrain : DataSetIterator  = new MnistDataSetIterator(batchSize,true,12345);\nval mnistTest : DataSetIterator = new MnistDataSetIterator(batchSize,false,12345);\n\n\nval lrSchedule :  Map[Integer, Double] = new HashMap[Integer, Double]();\nlrSchedule.put(0, 0.01);\nlrSchedule.put(1000, 0.005);\nlrSchedule.put(3000, 0.001);\nval batchSizePerWorker = 16;","user":"anonymous","dateUpdated":"2019-05-01T03:48:12+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"nChannels: Int = 1\noutputNum: Int = 10\nbatchSize: Int = 64\nnEpochs: Int = 1\nseed: Int = 123\nmnistTrain: org.nd4j.linalg.dataset.api.iterator.DataSetIterator = org.deeplearning4j.datasets.iterator.impl.MnistDataSetIterator@708f49a4\nmnistTest: org.nd4j.linalg.dataset.api.iterator.DataSetIterator = org.deeplearning4j.datasets.iterator.impl.MnistDataSetIterator@68538717\nlrSchedule: java.util.Map[Integer,Double] = {}\nres9: Double = 0.0\nres10: Double = 0.0\nres11: Double = 0.0\nbatchSizePerWorker: Int = 16\n"}]},"apps":[],"jobName":"paragraph_1556682025124_-1408385141","id":"20181126-225602_2080820782","dateCreated":"2019-05-01T03:40:25+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:18844","dateFinished":"2019-05-01T03:48:18+0000","dateStarted":"2019-05-01T03:48:12+0000"},{"text":"%sparkdl\nval conf : MultiLayerConfiguration = (new NeuralNetConfiguration.Builder()\n                .seed(seed)\n                .l2(0.0005)\n                .weightInit(WeightInit.XAVIER)\n                .updater(new Nesterovs(0.01, 0.9))\n                .list()\n                .layer(0, new ConvolutionLayer.Builder(5, 5)\n                        //nIn and nOut specify depth. nIn here is the nChannels and nOut is the number of filters to be applied\n                        .nIn(nChannels)\n                        .stride(1, 1)\n                        .nOut(20)\n                        .activation(Activation.IDENTITY)\n                        .build())\n                .layer(1, new SubsamplingLayer.Builder(PoolingType.MAX)\n                        .kernelSize(2,2)\n                        .stride(2,2)\n                        .build())\n                .layer(2, new ConvolutionLayer.Builder(5, 5)\n                        //Note that nIn need not be specified in later layers\n                        .stride(1, 1)\n                        .nOut(50)\n                        .activation(Activation.IDENTITY)\n                        .build())\n                .layer(3, new SubsamplingLayer.Builder(PoolingType.MAX)\n                        .kernelSize(2,2)\n                        .stride(2,2)\n                        .build())\n                .layer(4, new DenseLayer.Builder().activation(Activation.RELU)\n                        .nOut(500).build())\n                .layer(5, new OutputLayer.Builder(LossFunctions.LossFunction.NEGATIVELOGLIKELIHOOD)\n                        .nOut(outputNum)\n                        .activation(Activation.SOFTMAX)\n                        .build())\n                .setInputType(InputType.convolutionalFlat(28,28,1)) //See note below\n                .backprop(true).pretrain(false).build());\n","user":"anonymous","dateUpdated":"2019-05-01T03:48:25+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"warning: there were two deprecation warnings; re-run with -deprecation for details\nconf: org.deeplearning4j.nn.conf.MultiLayerConfiguration =\n{\n  \"backprop\" : true,\n  \"backpropType\" : \"Standard\",\n  \"cacheMode\" : \"NONE\",\n  \"confs\" : [ {\n    \"cacheMode\" : \"NONE\",\n    \"epochCount\" : 0,\n    \"iterationCount\" : 0,\n    \"layer\" : {\n      \"@class\" : \"org.deeplearning4j.nn.conf.layers.ConvolutionLayer\",\n      \"activationFn\" : {\n        \"@class\" : \"org.nd4j.linalg.activations.impl.ActivationIdentity\"\n      },\n      \"biasInit\" : 0.0,\n      \"biasUpdater\" : null,\n      \"constraints\" : null,\n      \"convolutionMode\" : \"Truncate\",\n      \"cudnnAlgoMode\" : \"PREFER_FASTEST\",\n      \"cudnnAllowFallback\" : true,\n      \"cudnnBwdDataAlgo\" : null,\n      \"cudnnBwdFilterAlgo\" : null,\n      \"cudnnFwdAlgo\" : null,\n      \"dilation\" : [ 1, 1 ],\n      \"dist\" : null,\n      \"gradientNormalization\" : \"N..."}]},"apps":[],"jobName":"paragraph_1556682025125_-652225875","id":"20181126-225811_2023297150","dateCreated":"2019-05-01T03:40:25+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:18845","dateFinished":"2019-05-01T03:48:30+0000","dateStarted":"2019-05-01T03:48:25+0000"},{"text":"%sparkdl\nval model = new MultiLayerNetwork(conf);\nmodel.init();\nmnistTrain.reset();\nmodel.fit(mnistTrain);\nprintln(\"Fitting set entropy: \" + model.score());\nmnistTest.reset();\nprintln(model.evaluate(mnistTest));","user":"anonymous","dateUpdated":"2019-05-01T03:48:40+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"msg":[{"data":"","type":"TEXT"}]},"apps":[],"jobName":"paragraph_1556682025127_1083497049","id":"20181126-233116_886312058","dateCreated":"2019-05-01T03:40:25+0000","status":"RUNNING","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:18846","dateStarted":"2019-05-01T03:48:40+0000"},{"text":"%sparkdl\n\n\nval conf2 : MultiLayerConfiguration = (new NeuralNetConfiguration.Builder()\n                .seed(seed)\n                .l2(0.0005)\n                .weightInit(WeightInit.XAVIER)\n                .updater(new Nesterovs(0.01, 0.9))\n                .list()\n                .layer(0, new ConvolutionLayer.Builder(5, 5)\n                        //nIn and nOut specify depth. nIn here is the nChannels and nOut is the number of filters to be applied\n                        .nIn(nChannels)\n                        .stride(1, 1)\n                        .nOut(20)\n                        .activation(Activation.IDENTITY)\n                        .build())\n                .layer(1, new SubsamplingLayer.Builder(PoolingType.MAX)\n                        .kernelSize(2,2)\n                        .stride(2,2)\n                        .build())\n                .layer(2, new ConvolutionLayer.Builder(5, 5)\n                        //Note that nIn need not be specified in later layers\n                        .stride(1, 1)\n                        .nOut(50)\n                        .activation(Activation.IDENTITY)\n                        .build())\n                .layer(3, new SubsamplingLayer.Builder(PoolingType.MAX)\n                        .kernelSize(2,2)\n                        .stride(2,2)\n                        .build())\n                .layer(4, new DenseLayer.Builder().activation(Activation.RELU)\n                        .nOut(499).build())\n                .layer(5, new OutputLayer.Builder(LossFunctions.LossFunction.NEGATIVELOGLIKELIHOOD)\n                        .nOut(outputNum)\n                        .activation(Activation.SOFTMAX)\n                        .build())\n                .setInputType(InputType.convolutionalFlat(28,28,1)) //See note below\n                .backprop(true).pretrain(false).build());","user":"anonymous","dateUpdated":"2019-05-01T03:41:10+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"warning: there were two deprecation warnings; re-run with -deprecation for details\nconf2: org.deeplearning4j.nn.conf.MultiLayerConfiguration =\n{\n  \"backprop\" : true,\n  \"backpropType\" : \"Standard\",\n  \"cacheMode\" : \"NONE\",\n  \"confs\" : [ {\n    \"cacheMode\" : \"NONE\",\n    \"epochCount\" : 0,\n    \"iterationCount\" : 0,\n    \"layer\" : {\n      \"@class\" : \"org.deeplearning4j.nn.conf.layers.ConvolutionLayer\",\n      \"activationFn\" : {\n        \"@class\" : \"org.nd4j.linalg.activations.impl.ActivationIdentity\"\n      },\n      \"biasInit\" : 0.0,\n      \"biasUpdater\" : null,\n      \"constraints\" : null,\n      \"convolutionMode\" : \"Truncate\",\n      \"cudnnAlgoMode\" : \"PREFER_FASTEST\",\n      \"cudnnAllowFallback\" : true,\n      \"cudnnBwdDataAlgo\" : null,\n      \"cudnnBwdFilterAlgo\" : null,\n      \"cudnnFwdAlgo\" : null,\n      \"dilation\" : [ 1, 1 ],\n      \"dist\" : null,\n      \"gradientNormalization\" : \"..."}]},"apps":[],"jobName":"paragraph_1556682025130_-675974618","id":"20181126-232129_811149675","dateCreated":"2019-05-01T03:40:25+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:18847"},{"text":"%sparkdl\nval model2 = new MultiLayerNetwork(conf2);\nmodel2.init();\nmnistTrain.reset();\nmodel2.fit(mnistTrain);\nprintln(\"Fitting set entropy: \" + model2.score());\nmnistTest.reset();\nprintln(model2.evaluate(mnistTest));","user":"anonymous","dateUpdated":"2019-05-01T03:41:15+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"model2: org.deeplearning4j.nn.multilayer.MultiLayerNetwork = org.deeplearning4j.nn.multilayer.MultiLayerNetwork@78b2d317\nFitting set entropy: 0.1508498437972155\n\n\n========================Evaluation Metrics========================\n # of classes:    10\n Accuracy:        0.9780\n Precision:       0.9782\n Recall:          0.9778\n F1 Score:        0.9779\nPrecision, recall & F1: macro-averaged (equally weighted avg. of 10 classes)\n\n\n=========================Confusion Matrix=========================\n    0    1    2    3    4    5    6    7    8    9\n---------------------------------------------------\n  972    1    1    0    0    0    3    2    1    0 | 0 = 0\n    0 1131    2    1    0    0    0    1    0    0 | 1 = 1\n    7    7  991    4    5    0    5   11    2    0 | 2 = 2\n    2    0    4  983    0    7    0    6    6    2 | 3 = 3\n    1    1    0    0  969    0    5    1    0    5 | 4 = 4\n    6    2    0    5    0  869    8    1    1    0 | 5 = 5\n    9    5    0    0    1    1  942    0    0    0 | 6 = 6\n    1    4    6    1    0    0    0 1011    1    4 | 7 = 7\n    8    1    2    1    4    2    7    7  940    2 | 8 = 8\n    6    6    0    4   12    3    0    6    0  972 | 9 = 9\n\nConfusion matrix format: Actual (rowClass) predicted as (columnClass) N times\n==================================================================\n"}]},"apps":[],"jobName":"paragraph_1556682025133_-17735924","id":"20181126-233127_347755810","dateCreated":"2019-05-01T03:40:25+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:18848"},{"text":"%sparkdl\n\nval conf3 : MultiLayerConfiguration = (new NeuralNetConfiguration.Builder()\n                .seed(seed)\n                .l2(0.0005)\n                .weightInit(WeightInit.XAVIER)\n                .updater(new Nesterovs(0.01, 0.9))\n                .list()\n                .layer(0, new ConvolutionLayer.Builder(5, 5)\n                        //nIn and nOut specify depth. nIn here is the nChannels and nOut is the number of filters to be applied\n                        .nIn(nChannels)\n                        .stride(1, 1)\n                        .nOut(20)\n                        .activation(Activation.IDENTITY)\n                        .build())\n                .layer(1, new SubsamplingLayer.Builder(PoolingType.MAX)\n                        .kernelSize(2,2)\n                        .stride(2,2)\n                        .build())\n                .layer(2, new ConvolutionLayer.Builder(5, 5)\n                        //Note that nIn need not be specified in later layers\n                        .stride(1, 1)\n                        .nOut(50)\n                        .activation(Activation.IDENTITY)\n                        .build())\n                .layer(3, new SubsamplingLayer.Builder(PoolingType.MAX)\n                        .kernelSize(2,2)\n                        .stride(2,2)\n                        .build())\n                .layer(4, new DenseLayer.Builder().activation(Activation.RELU)\n                        .nOut(501).build())\n                .layer(5, new OutputLayer.Builder(LossFunctions.LossFunction.NEGATIVELOGLIKELIHOOD)\n                        .nOut(outputNum)\n                        .activation(Activation.SOFTMAX)\n                        .build())\n                .setInputType(InputType.convolutionalFlat(28,28,1)) //See note below\n                .backprop(true).pretrain(false).build());   \n","user":"anonymous","dateUpdated":"2019-05-01T03:41:17+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"warning: there were two deprecation warnings; re-run with -deprecation for details\nconf3: org.deeplearning4j.nn.conf.MultiLayerConfiguration =\n{\n  \"backprop\" : true,\n  \"backpropType\" : \"Standard\",\n  \"cacheMode\" : \"NONE\",\n  \"confs\" : [ {\n    \"cacheMode\" : \"NONE\",\n    \"epochCount\" : 0,\n    \"iterationCount\" : 0,\n    \"layer\" : {\n      \"@class\" : \"org.deeplearning4j.nn.conf.layers.ConvolutionLayer\",\n      \"activationFn\" : {\n        \"@class\" : \"org.nd4j.linalg.activations.impl.ActivationIdentity\"\n      },\n      \"biasInit\" : 0.0,\n      \"biasUpdater\" : null,\n      \"constraints\" : null,\n      \"convolutionMode\" : \"Truncate\",\n      \"cudnnAlgoMode\" : \"PREFER_FASTEST\",\n      \"cudnnAllowFallback\" : true,\n      \"cudnnBwdDataAlgo\" : null,\n      \"cudnnBwdFilterAlgo\" : null,\n      \"cudnnFwdAlgo\" : null,\n      \"dilation\" : [ 1, 1 ],\n      \"dist\" : null,\n      \"gradientNormalization\" : \"..."}]},"apps":[],"jobName":"paragraph_1556682025135_1211564364","id":"20181126-225944_1880033207","dateCreated":"2019-05-01T03:40:25+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:18849"},{"text":"%sparkdl\nval model3 = new MultiLayerNetwork(conf3);\nmodel3.init();\nmnistTrain.reset();\nmodel3.fit(mnistTrain);\nprintln(\"Fitting set entropy: \" + model3.score());\nmnistTest.reset();\nprintln(model3.evaluate(mnistTest));","user":"anonymous","dateUpdated":"2019-05-01T03:41:22+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"model3: org.deeplearning4j.nn.multilayer.MultiLayerNetwork = org.deeplearning4j.nn.multilayer.MultiLayerNetwork@1931192\nFitting set entropy: 0.13610854569156877\n\n\n========================Evaluation Metrics========================\n # of classes:    10\n Accuracy:        0.9776\n Precision:       0.9777\n Recall:          0.9775\n F1 Score:        0.9775\nPrecision, recall & F1: macro-averaged (equally weighted avg. of 10 classes)\n\n\n=========================Confusion Matrix=========================\n    0    1    2    3    4    5    6    7    8    9\n---------------------------------------------------\n  973    0    1    0    0    1    1    1    3    0 | 0 = 0\n    0 1117    4    1    0    2    2    2    7    0 | 1 = 1\n    7    0 1015    1    1    0    0    7    1    0 | 2 = 2\n    2    0    8  983    0    6    0    6    5    0 | 3 = 3\n    0    0    2    0  974    0    1    1    1    3 | 4 = 4\n    6    0    1    9    0  867    3    1    3    2 | 5 = 5\n   12    3    1    0    4    1  936    0    1    0 | 6 = 6\n    1    2   19    1    0    0    0 1000    2    3 | 7 = 7\n    8    0    3    2    2    0    5    4  949    1 | 8 = 8\n    6    5    1    6   13    1    0    6    9  962 | 9 = 9\n\nConfusion matrix format: Actual (rowClass) predicted as (columnClass) N times\n==================================================================\n"}]},"apps":[],"jobName":"paragraph_1556682025137_1877676807","id":"20181126-230323_1881261333","dateCreated":"2019-05-01T03:40:25+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:18850"}],"name":"week14/ModelExample","id":"2EBNV94A9","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}